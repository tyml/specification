{!tyml 1.0
	!ns:    <tyml.org/typedef/0.9>
	!ns/s:  <tyml.org/typedef/0.9>
	!ns/t:  <tyml.org/types/0.9>
	!ns/c:  <tyml.org/typedef/constraints/0.9>
}

{DefinitionPackage [
	{NamespaceDefinition <c>
		AttachableAttributes:[
			{$  <Regex> 
				Type:		<t/Regex> 
				OwnerType:	<s/StringOrPrimitiveType>
				s/IsConstraint:true
			}
			{$  <ValidValues> 
				Type:		{ArrayType [<t/String> <c/ValidValue>]}
				OwnerType:	<s/StringOrPrimitiveTypeDefinition>
				s/IsConstraint:true
			}
		]

		Types:[
			{ObjectTypeDefinition <ValidValue>
				Attributes:[
					{$ <Value> Type:<t/String> CanBeImplicit:true}
					{$ <Description> Type:<t/String> DefaultValue:<>}
				]
			}
		]
	}
	
	{NamespaceDefinition <s>
		AttachableAttributes:[
			{$ <IsConstraint> Type:<t/Boolean> OwnerType:[<s/AttachableAttributeDefinition>]
				Description:<Specifies whether the attachable attribute is applied to type definitions to describe constraints.> 
			}
		]
		Types:[

            {PrimitiveTypeDefinition <NoDefaultValue> c/ValidValues:[{c/ValidValue <NoDefaultValue> 
                Description:<States that there is no default value and a value must be assigned to the attribute.>}
            ]}

			{ObjectTypeDefinition <DefinitionPackage>
				Attributes:[
					{$ <NamespaceDefinitions> 
						Type:{ArrayType <s/NamespaceDefinition>} 
						CanBeImplicit:true
						Description:<Contains all namespace definitions for this definition package.>
					}
				]
			}
			
			{ObjectTypeDefinition <NamespaceDefinition>
				Attributes:[
					{$ <Namespace> Type:<t/NamespacePrefix> CanBeImplicit:true Description:<Specifies the namespace to be defined.>}
					{$ <Types> Type:{ArrayType <s/TypeDefinition>} DefaultValue:[]
                        Description:<Contains all types that are defined in the specified namespace.>
                    }
					{$ <AttachableAttributes> Type:{ArrayType <s/AttachableAttributeDefinition>} DefaultValue:[]
                        Description:<Contains all attachable attributes that are defined in the specified namespace.>
                    }
				]
			}
			
			{ObjectTypeDefinition <AttachableAttributeDefinition>
                TypeParameters:[{$ <Type> Description:<Specifies the type of the values that can be assigned to this attribute.>}]
				Attributes:[
					{$ <Name> Type:<t/String> CanBeImplicit:true Description:<Specifies the name of the attachable attribute.>}
					{$ <Description> Type:<t/String> DefaultValue:<> Description:<Describes the attachable attribute.>}
					{-- {$ <Type> Type:<s/Type> Description:<Specifies the type of the values that can be assigned to this attribute.>} --}
					{$ <OwnerType> Type:[<s/TypeReference> <s/UnionType> <s/GenericType>] Description:<Specifies the type that this attribute can be attached to.>}
                    {$ <DefaultValue> Type:[<s/NoDefaultValue> {TypeParameter <Type>}] DefaultValue:{=s/NoDefaultValue NoDefaultValue}}
				]
			}
			
			{AliasDefinition <TypeDefinition> [
				<s/ObjectTypeDefinition> 
				<s/UnionTypeDefinition>
				<s/ArrayTypeDefinition>
				<s/StringTypeDefinition>
				<s/PrimitiveTypeDefinition>
			]}
			
			{PrimitiveTypeDefinition <ObjectKind> c/ValidValues:[<Abstract> <Extendable> <Final>]}

			
			{ObjectTypeDefinition <ObjectTypeDefinition>
				Attributes:[
					{$ <Name> Type:<t/Identifier> CanBeImplicit:true}
					{$ <Description> Type:<t/String> DefaultValue:<>}
					{$ <Kind> Type:<s/ObjectKind> DefaultValue:Final}
					{$ <TypeParameters> Type:{ArrayType <s/TypeParameterDefinition>} DefaultValue:[]}
					{$ <Extends> Type:[<s/TypeReference> <s/GenericType>] DefaultValue:{ObjectType}}
                    {$ <Implements> Type:{ArrayType [<s/TypeReference> <s/GenericType>]} DefaultValue:[]}
					{$ <Attributes> Type:{ArrayType <s/Attribute>} DefaultValue:[]}
				]
			}
			
			{ObjectTypeDefinition <TypeParameterDefinition>
				Attributes:[
					{$ <Name> Type:<t/Identifier> CanBeImplicit:true}
					{$ <Description> Type:<t/String> DefaultValue:<>}
					{-- {Attribute <Direction>} --}
				]
			}
			
			{ObjectTypeDefinition <Attribute>
				Attributes:[
					{$ <Name> Type:<t/Identifier> CanBeImplicit:true}
					{$ <Description> Type:<t/String> DefaultValue:<>}
					{$ <Type> Type:<s/Type>}
					{$ <CanBeImplicit> Type:<t/Boolean> DefaultValue:false}
					{$ <DefaultValue> Type:<t/AnyType> DefaultValue:NoDefaultValue}
				]
			}
			
			{ObjectTypeDefinition <AliasDefinition>
				Attributes:[
					{$ <Name> Type:<t/Identifier> CanBeImplicit:true}
					{$ <Description> Type:<t/String> DefaultValue:<>}
					{$ <Type> Type:<s/Type> CanBeImplicit:true}
                    {$ <TypeParameters> Type:{ArrayType <s/TypeParameter>} DefaultValue:[]}
				]
			}
			
			{ObjectTypeDefinition <ArrayTypeDefinition>
				Attributes:[
					{$ <Name> Type:<t/Identifier> CanBeImplicit:true}
					{$ <Description> Type:<t/String> DefaultValue:<>}
					{$ <ItemType> Type:<s/Type> CanBeImplicit:true}
					{$ <TypeParameters> Type:{ArrayType <s/TypeParameter>} DefaultValue:[]}
				]
			}

			{ObjectTypeDefinition <StringTypeDefinition>
				Attributes:[
					{$ <Name> Type:<t/Identifier> CanBeImplicit:true}
					{$ <Description> Type:<t/String> DefaultValue:<>}
					{$ <Extends> Type:<t/TypeReference> CanBeImplicit:true DefaultValue:{StringType}}
				]
			}

			{ObjectTypeDefinition <PrimitiveTypeDefinition>
				Attributes:[
					{$ <Name> Type:<t/Identifier> CanBeImplicit:true}
					{$ <Description> Type:<t/String> DefaultValue:<>}
					{$ <Extends> Type:<t/TypeReference> CanBeImplicit:true DefaultValue:{PrimitiveType}}
				]
			}

			{AliasDefinition <StringOrPrimitiveTypeDefinition> 
				[<s/StringTypeDefinition> <s/PrimitiveTypeDefinition>]
			}


			{AliasDefinition <Type> [
				<s/TypeReference>
				<s/StringType>
				<s/PrimitiveType>
				<s/UnionType>
				<s/ArrayType>
				<s/TypeArgument>
				<s/GenericType>
				<s/ObjectType>
				<s/AnyType>
			]}
			
			{ArrayTypeDefinition <UnionType> ItemType:<s/Type>}

			{StringTypeDefinition <TypeReference> Extends:<t/NamespacedIdentifier>}
			
			
			{ObjectTypeDefinition <ArrayType>
				Attributes:[
					{Attribute <ItemType> Type:<s/Type> CanBeImplicit:true}
				]
			}
			
			{ObjectTypeDefinition <TypeParameter>
				Attributes:[
					{Attribute <Name> Type:<t/Identifier> CanBeImplicit:true}
				]
			}

			{ObjectTypeDefinition <Instantiate>
				Attributes:[
					{Attribute <BaseType> Type:<s/TypeReference> CanBeImplicit:true}
					{Attribute <TypeArguments> Type:{ArrayType <s/Type>} CanBeImplicit:true}
				]
			}
			
			{ObjectTypeDefinition <StringType>}
			{ObjectTypeDefinition <PrimitiveType>}
			{ObjectTypeDefinition <ObjectType>}
			{ObjectTypeDefinition <AnyType>}
		]
	}
]}
